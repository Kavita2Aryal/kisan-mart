(function($) {
    'use strict';
    var Thunder = function() {
        this.VERSION = "4.1.0";
        this.AUTHOR = "Gaurav";
        this.SUPPORT = "gaurav";
        this.pageScrollElement = 'html, body';
        this.$body = $('body');
        this.setUserOS();
        this.setUserAgent();
    }
    Thunder.prototype.setUserOS = function() {
        var OSName = "";
        if (navigator.appVersion.indexOf("Win") != -1) OSName = "windows";
        if (navigator.appVersion.indexOf("Mac") != -1) OSName = "mac";
        if (navigator.appVersion.indexOf("X11") != -1) OSName = "unix";
        if (navigator.appVersion.indexOf("Linux") != -1) OSName = "linux";
        this.$body.addClass(OSName);
    }
    Thunder.prototype.setUserAgent = function() {
        if (navigator.userAgent.match(/Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile/i)) {
            this.$body.addClass('mobile');
        } else {
            this.$body.addClass('desktop');
            if (navigator.userAgent.match(/MSIE 9.0/)) {
                this.$body.addClass('ie9');
            }
        }
    }
    Thunder.prototype.isVisibleXs = function() {
        (!$('#pg-visible-xs').length) && this.$body.append('<div id="pg-visible-xs" class="visible-xs" />');
        return $('#pg-visible-xs').is(':visible');
    }
    Thunder.prototype.isVisibleSm = function() {
        (!$('#pg-visible-sm').length) && this.$body.append('<div id="pg-visible-sm" class="visible-sm" />');
        return $('#pg-visible-sm').is(':visible');
    }
    Thunder.prototype.isVisibleMd = function() {
        (!$('#pg-visible-md').length) && this.$body.append('<div id="pg-visible-md" class="visible-md" />');
        return $('#pg-visible-md').is(':visible');
    }
    Thunder.prototype.isVisibleLg = function() {
        (!$('#pg-visible-lg').length) && this.$body.append('<div id="pg-visible-lg" class="visible-lg" />');
        return $('#pg-visible-lg').is(':visible');
    }
    Thunder.prototype.getUserAgent = function() {
        return $('body').hasClass('mobile') ? "mobile" : "desktop";
    }
    Thunder.prototype.initDropDown = function(context) {
        $('.dropdown-default', context).each(function() {
            var btn = $(this).find('.dropdown-menu').siblings('.dropdown-toggle');
            var offset = 0;
            var menuWidth = $(this).find('.dropdown-menu').actual('outerWidth');
            if (btn.actual('outerWidth') < menuWidth) {
                btn.width(menuWidth - offset);
                $(this).find('.dropdown-menu').width(btn.actual('outerWidth'));
            } else {
                $(this).find('.dropdown-menu').width(btn.actual('outerWidth'));
            }
        });
    }
    Thunder.prototype.initFormGroupDefault = function(context) {
        $('.form-group.form-group-default', context).click(function() {
            $(this).find('input').focus();
        });
        if (!this.initFormGroupDefaultRun) {
            $('body').on('focus', '.form-group.form-group-default :input', function() {
                var type = $(this).attr("type");
                if (type == "checkbox" || type == "radio") {
                    return;
                }
                $('.form-group.form-group-default').removeClass('focused');
                $(this).parents('.form-group').addClass('focused');
            });
            $('body').on('blur', '.form-group.form-group-default :input', function() {
                var type = $(this).attr("type");
                if (type == "checkbox" || type == "radio") {
                    return;
                }
                $(this).parents('.form-group').removeClass('focused');
                if ($(this).val()) {
                    $(this).closest('.form-group').find('label').addClass('fade');
                } else {
                    $(this).closest('.form-group').find('label').removeClass('fade');
                }
            });
            this.initFormGroupDefaultRun = true;
        }
    }
    Thunder.prototype.initSlidingTabs = function(context) {
        $('a[data-toggle="tab"]', context).on('show.bs.tab', function(e) {
            e = $(e.target).parent().find('a[data-toggle=tab]');
            var hrefCurrent = e.data('target');
            if (hrefCurrent === undefined) {
                hrefCurrent = e.attr('href');
            }
            if (!$(hrefCurrent).is('.slide-left, .slide-right')) return;
            $(hrefCurrent).addClass('sliding');
            setTimeout(function() {
                $(hrefCurrent).removeClass('sliding');
            }, 100);
        });
    }
    Thunder.prototype.reponsiveTabs = function() {
        $('[data-init-reponsive-tabs="dropdownfx"]').each(function() {
            var drop = $(this);
            drop.addClass("d-none d-md-flex d-lg-flex d-xl-flex");
            var content = '<select class="cs-select cs-skin-slide full-width" data-init-plugin="cs-select">'
            for (var i = 1; i <= drop.children("li").length; i++) {
                var li = drop.children("li:nth-child(" + i + ")");
                var selected = "";
                if (li.children('a').hasClass("active")) {
                    selected = "selected";
                }
                var tabRef = li.children('a').attr('href');
                if (tabRef == "#" || "") {
                    tabRef = li.children('a').attr('data-target')
                }
                content += '<option value="' + tabRef + '" ' + selected + '>';
                content += li.children('a').text();
                content += '</option>';
            }
            content += '</select>'
            drop.after(content);
            var select = drop.next()[0];
            $(select).on('change', function(e) {
                var optionSelected = $("option:selected", this);
                var valueSelected = this.value;
                var tabLink = drop.find('a[data-target="' + valueSelected + '"]');
                if (tabLink.length == 0) {
                    tabLink = drop.find('a[data-target="' + valueSelected + '"]')
                }
                tabLink.tab('show')
            })
            $(select).wrap('<div class="nav-tab-dropdown cs-wrapper full-width d-lg-none d-xl-none d-md-none"></div>');
            new SelectFx(select);
        });
    }
    Thunder.prototype.initScrollBarPlugin = function(context) {
        $.fn.scrollbar && $('.scrollable', context).scrollbar({
            ignoreOverlay: false
        });
    }
    Thunder.prototype.init = function() {
        this.initDropDown();
        this.initFormGroupDefault();
        this.initSlidingTabs();
        this.reponsiveTabs();
        this.initScrollBarPlugin();
    }
    $.Thunder = new Thunder();
    $.Thunder.Constructor = Thunder;
})(window.jQuery);
(function($) {
    'use strict';
    var MobileView = function(element, options) {
        var self = this;
        self.options = $.extend(true, {}, $.fn.pgMobileViews.defaults, options);
        self.element = $(element);
        self.element.on('click', function(e) {
            e.preventDefault();
            var data = self.element.data();
            var el = $(data.viewPort);
            var toView = data.toggleView;
            if (data.toggleView != null) {
                el.children().last().children('.view').hide();
                $(data.toggleView).show();
            } else {
                toView = el.last();
            }
            el.toggleClass(data.viewAnimation);
            self.options.onNavigate(toView, data.viewAnimation);
            return false;
        })
        return this;
    };
    $.fn.pgMobileViews = function(options) {
        return new MobileView(this, options);
    };
    $.fn.pgMobileViews.defaults = {
        onNavigate: function(view, animation) {}
    }
    $(window).on('load', function() {
        $('[data-navigate="view"]').each(function() {
            var $mobileView = $(this)
            $mobileView.pgMobileViews();
        })
    });
})(window.jQuery);

(function($) {
    'use strict';
    var Quickview = function(element, options) {
        this.$element = $(element);
        this.options = $.extend(true, {}, $.fn.quickview.defaults, options);
        this.bezierEasing = [.05, .74, .27, .99];
        var _this = this;
        $(this.options.notes).on('click', '.list > ul > li', function(e) {
            var note = $(this).find('.note-preview');
            var note = $(this).find('.note-preview');
            $(_this.options.noteEditor).html(note.html());
            $(_this.options.notes).toggleClass('push');
        });
        $(this.options.notes).on('click', '.list > ul > li .form-check', function(e) {
            e.stopPropagation();
        });
        $(this.options.notes).on('click', _this.options.backButton, function(e) {
            $(_this.options.notes).find('.toolbar > li > a').removeClass('active');
            $(_this.options.notes).toggleClass('push');
        });
        $(this.options.deleteNoteButton).click(function(e) {
            e.preventDefault();
            $(this).toggleClass('selected');
            $(_this.options.notes).find('.list > ul > li .form-check').fadeToggle("fast");
            $(_this.options.deleteNoteConfirmButton).fadeToggle("fast").removeClass('hide');
        });
        $(this.options.newNoteButton).click(function(e) {
            e.preventDefault();
            $(_this.options.noteEditor).html('');
        });
        $(this.options.deleteNoteConfirmButton).click(function() {
            var checked = $(_this.options.notes).find('input[type=checkbox]:checked');
            checked.each(function() {
                $(this).parents('li').remove();
            });
        });
        $(this.options.notes).on('click', '.toolbar > li > a', function(e) {
            var command = $(this).attr('data-action');
            document.execCommand(command, false, null);
            $(this).toggleClass('active');
        });
    }
    Quickview.VERSION = "1.0.0";

    function Plugin(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data('pg.quickview');
            var options = typeof option == 'object' && option;
            if (!data) $this.data('pg.quickview', (data = new Quickview(this, options)));
            if (typeof option == 'string') data[option]();
        })
    }
    var old = $.fn.quickview
    $.fn.quickview = Plugin
    $.fn.quickview.Constructor = Quickview
    $.fn.quickview.defaults = {
        notes: '#note-views',
        alerts: '#alerts',
        chat: '#chat',
        notesList: '.list',
        noteEditor: '.quick-note-editor',
        deleteNoteButton: '.delete-note-link',
        deleteNoteConfirmButton: '.btn-remove-notes',
        newNoteButton: '.new-note-link',
        backButton: '.close-note-link'
    }
    $.fn.quickview.noConflict = function() {
        $.fn.quickview = old;
        return this;
    }
    $(window).on('load', function() {
        $('[data-pages="quickview"]').each(function() {
            var $quickview = $(this)
            $quickview.quickview($quickview.data())
        })
    });
    $(document).on('click.pg.quickview.data-api', '[data-toggle="quickview"]', function(e) {
        var elem = $(this).attr('data-toggle-element');
        $(elem).toggleClass('open');
        e.preventDefault();
    })
})(window.jQuery);

(function(global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory() : typeof define === 'function' && define.amd ? define(factory) : (factory());
}(this, (function() {
    'use strict';

    function init() {
        var hadKeyboardEvent = true;
        var hadFocusVisibleRecently = false;
        var hadFocusVisibleRecentlyTimeout = null;
        var inputTypesWhitelist = {
            text: true,
            search: true,
            url: true,
            tel: true,
            email: true,
            password: true,
            number: true,
            date: true,
            month: true,
            week: true,
            time: true,
            datetime: true,
            'datetime-local': true
        };

        function isValidFocusTarget(el) {
            if (el && el !== document && el.nodeName !== 'HTML' && el.nodeName !== 'BODY') {
                return true;
            }
            return false;
        }

        function focusTriggersKeyboardModality(el) {
            var type = el.type;
            var tagName = el.tagName;
            if (tagName == 'INPUT' && inputTypesWhitelist[type] && !el.readonly) {
                return true;
            }
            if (tagName == 'TEXTAREA' && !el.readonly) {
                return true;
            }
            if (el.contentEditable == 'true') {
                return true;
            }
            return false;
        }

        function addFocusVisibleClass(el) {
            if (el.classList.contains('focus-visible')) {
                return;
            }
            el.classList.add('focus-visible');
            el.setAttribute('data-focus-visible-added', '');
        }

        function removeFocusVisibleClass(el) {
            if (!el.hasAttribute('data-focus-visible-added')) {
                return;
            }
            el.classList.remove('focus-visible');
            el.removeAttribute('data-focus-visible-added');
        }

        function onKeyDown(e) {
            if (isValidFocusTarget(document.activeElement)) {
                addFocusVisibleClass(document.activeElement);
            }
            hadKeyboardEvent = true;
        }

        function onPointerDown(e) {
            hadKeyboardEvent = false;
        }

        function onFocus(e) {
            if (!isValidFocusTarget(e.target)) {
                return;
            }
            if (hadKeyboardEvent || focusTriggersKeyboardModality(e.target)) {
                addFocusVisibleClass(e.target);
                hadKeyboardEvent = false;
            }
        }

        function onBlur(e) {
            if (!isValidFocusTarget(e.target)) {
                return;
            }
            if (e.target.classList.contains('focus-visible')) {
                hadFocusVisibleRecently = true;
                window.clearTimeout(hadFocusVisibleRecentlyTimeout);
                hadFocusVisibleRecentlyTimeout = window.setTimeout(function() {
                    hadFocusVisibleRecently = false;
                    window.clearTimeout(hadFocusVisibleRecentlyTimeout);
                }, 100);
                removeFocusVisibleClass(e.target);
            }
        }

        function onVisibilityChange(e) {
            if (document.visibilityState == 'hidden') {
                if (hadFocusVisibleRecently) {
                    hadKeyboardEvent = true;
                }
                addInitialPointerMoveListeners();
            }
        }

        function addInitialPointerMoveListeners() {
            document.addEventListener('mousemove', onInitialPointerMove);
            document.addEventListener('mousedown', onInitialPointerMove);
            document.addEventListener('mouseup', onInitialPointerMove);
            document.addEventListener('pointermove', onInitialPointerMove);
            document.addEventListener('pointerdown', onInitialPointerMove);
            document.addEventListener('pointerup', onInitialPointerMove);
            document.addEventListener('touchmove', onInitialPointerMove);
            document.addEventListener('touchstart', onInitialPointerMove);
            document.addEventListener('touchend', onInitialPointerMove);
        }

        function removeInitialPointerMoveListeners() {
            document.removeEventListener('mousemove', onInitialPointerMove);
            document.removeEventListener('mousedown', onInitialPointerMove);
            document.removeEventListener('mouseup', onInitialPointerMove);
            document.removeEventListener('pointermove', onInitialPointerMove);
            document.removeEventListener('pointerdown', onInitialPointerMove);
            document.removeEventListener('pointerup', onInitialPointerMove);
            document.removeEventListener('touchmove', onInitialPointerMove);
            document.removeEventListener('touchstart', onInitialPointerMove);
            document.removeEventListener('touchend', onInitialPointerMove);
        }

        function onInitialPointerMove(e) {
            if (e.target.nodeName.toLowerCase() === 'html') {
                return;
            }
            hadKeyboardEvent = false;
            removeInitialPointerMoveListeners();
        }
        document.addEventListener('keydown', onKeyDown, true);
        document.addEventListener('mousedown', onPointerDown, true);
        document.addEventListener('pointerdown', onPointerDown, true);
        document.addEventListener('touchstart', onPointerDown, true);
        document.addEventListener('focus', onFocus, true);
        document.addEventListener('blur', onBlur, true);
        document.addEventListener('visibilitychange', onVisibilityChange, true);
        addInitialPointerMoveListeners();
        document.body.classList.add('js-focus-visible');
    }

    function onDOMReady(callback) {
        var loaded;

        function load() {
            if (!loaded) {
                loaded = true;
                callback();
            }
        }
        if (document.readyState === 'complete') {
            callback();
        } else {
            loaded = false;
            document.addEventListener('DOMContentLoaded', load, false);
            window.addEventListener('load', load, false);
        }
    }
    if (typeof document !== 'undefined') {
        onDOMReady(init);
    }
})));
(function($) {
    'use strict';
    $.Thunder.init();
})(window.jQuery);